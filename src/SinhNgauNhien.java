
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.Hashtable;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author TranMinhHai
 */
public class SinhNgauNhien extends javax.swing.JFrame {
    
    private String mon = "";
    private int hinhthuc = 0;
    private int soCauDe1 = 0;
    private int soCauTB1 = 0;
    private int soCauKho1 = 0;
    private int soCauDe2 = 0;
    private int soCauTB2 = 0;
    private int soCauKho2 = 0;
    
    private DeThi dethi;
    private TracNghiem[] tn = new TracNghiem[500];
    
    private TuLuan[] tl = new TuLuan[500];
    private int itl = 0;
    private int itn = 0;
    private int ida = 0;
    /**
     * Creates new form SinhNgauNhien
     */
    public SinhNgauNhien(String Mon,int Hinhthuc, int x1, int x2, int x3, int x4, int x5, int x6) {
        try {
            mon = Mon;
            hinhthuc = Hinhthuc;
            soCauDe1 = x1;
            soCauTB1 = x2;
            soCauKho1 = x3;
            soCauDe2 = x4;
            soCauTB2 = x5;
            soCauKho2 = x6;
            String url = System.getProperty("user.dir", null);
            String pathtl = url+"\\BTLOOP\\"+mon+"tl.txt";
            String pathtn = url+"\\BTLOOP\\"+mon+"tn.txt";
            
            String s = null;
            BufferedReader in = null;
            
            initComponents();
            setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
            jLabel6.setText(Mon);
            in = new BufferedReader(new InputStreamReader(new FileInputStream(pathtl), "UTF8"));
            s = in.readLine();
            do{
                String str[] = s.split("&");
                String strr[] = str[1].split("#");
                tl[itl] = new TuLuan(mon,str[0],strr,str[2],str[3]);
                itl++;
                s = in.readLine();
            } while(s != null);
            
            
            in = new BufferedReader(new InputStreamReader(new FileInputStream(pathtn), "UTF8"));
            s = in.readLine();
            do{
                DapAn[] da = new DapAn[50];
                String str[] = s.split("&");
                String strr[] = str[1].split("#");
                String strrr[] = str[3].split("#");
                for(int k = 0; k < strrr.length; k = k + 2) {
                   da[ida] = new DapAn(strrr[k],Integer.parseInt(strrr[k+1]));
                   ida++;
                }
                ida = 0;
                tn[itn] = new TracNghiem(mon, str[0], strr, str[2], da);
                itn++;
                s = in.readLine();
            } while(s != null);
            
            
            for(TracNghiem tnnn:tn) {
                if(tnnn==null) break;
                System.out.println(tnnn.xuatCauHoi()+"\n"+tnnn.xuatDapAn());
            }
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(SinhNgauNhien.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(SinhNgauNhien.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(SinhNgauNhien.class.getName()).log(Level.SEVERE, null, ex);
        }
        
      
            
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jRadioButton11 = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("MÔN:");

        jLabel2.setText("chương:");

        jRadioButton1.setText("Chương 1");

        jRadioButton2.setText("Chương 2");

        jRadioButton3.setText("Chương 3");

        jRadioButton4.setText("Chương 4");

        jLabel5.setText("ĐỀ THI");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("SINH ĐỀ THI");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("ĐẢO CÂU HỎI");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("ĐẢO ĐÁP ÁN");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("XUẤT ĐỀ THI");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel6.setText("jLabel6");

        jRadioButton11.setText("Chương 5");

        jLabel3.setText("sau khi chọn các chương sẽ có mặt trong đề thi, kích SINH ĐỀ THI để tạo đề thi. Nếu không vừa ý,");

        jLabel4.setText("kích tiếp SINH ĐỀ THI để tạo đề thi khác");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton4)
                            .addComponent(jRadioButton3)
                            .addComponent(jRadioButton2)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jRadioButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jRadioButton11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(38, 38, 38)
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                                .addComponent(jButton3)
                                .addGap(18, 18, 18)
                                .addComponent(jButton4))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(13, 13, 13)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton11)
                        .addGap(0, 213, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(4, 4, 4)
                .addComponent(jLabel4)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dethi.daoCauHoi();
        String str="ĐỀ THI MÔN: "+mon+"\n\nPHẦN TRẮC NGHIỆM:\n";
        for(TracNghiem tn: dethi.xuatTN()) {
            if(tn==null) break;
            str = str + tn.xuatCauHoi() + "\n" + tn.xuatDapAn() + "\n\n";
        }
        str = str +"\n\n\nPHẦN TỰ LUẬN:\n";
        for(TuLuan tl: dethi.xuatTL()) {
            if(tl==null) break;
            str = str + tl.xuatCauHoi()+"\n";
        }
        jTextArea1.setText(str);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        int chuong1=0,chuong2=0,chuong3=0,chuong4=0,chuong5=0;
        if(jRadioButton1.isSelected()) chuong1=1;
        if(jRadioButton2.isSelected()) chuong2=1;
        if(jRadioButton3.isSelected()) chuong3=1;
        if(jRadioButton4.isSelected()) chuong4=1;
        if(jRadioButton11.isSelected()) chuong5=1;
        
        
        switch(mon) {
            case "toan": 
                if(chuong1==0 && chuong2==0 && chuong3==0) {
                    JOptionPane.showMessageDialog(null, "Chưa có chương nào của môn toán được chọn");
                }
                else {
                    int i=0;
                    TracNghiem[] tn1 = new TracNghiem[500];
                    TuLuan[] tl1 = new TuLuan[500];
                    int co=0;
                    for(TuLuan tuluan:tl) {
                        if(tuluan == null) break;
                        if(chuong1 == 1 && GhiDocFile.kiemTraChuaStr(tuluan.xuatChuong(),"1") == 1) {
                            tl1[i] = tuluan;
                            i++;
                            co = 1;
                        }
                        if(chuong2 == 1 && GhiDocFile.kiemTraChuaStr(tuluan.xuatChuong(),"2") == 1 && co == 0) {
                            tl1[i] = tuluan;
                            i++;
                            co = 1;
                        }
                        if(chuong3 == 1 && GhiDocFile.kiemTraChuaStr(tuluan.xuatChuong(),"3") == 1 && co == 0) {
                            tl1[i] = tuluan;
                            i++;
                            co = 1;
                        }
                        co = 0;
                    }
                    i=0;
                    for(TracNghiem tracnghiem:tn) {
                        if(tracnghiem == null) break;
                        if(chuong1 == 1 && GhiDocFile.kiemTraChuaStr(tracnghiem.xuatChuong(),"1") == 1) {
                            tn1[i] = tracnghiem;
                            i++;
                            co = 1;
                        }
                        if(chuong2 == 1 && GhiDocFile.kiemTraChuaStr(tracnghiem.xuatChuong(),"2") == 1 && co == 0) {
                            tn1[i] = tracnghiem;
                            i++;
                            co = 1;
                        }
                        if(chuong3 == 1 && GhiDocFile.kiemTraChuaStr(tracnghiem.xuatChuong(),"3") == 1 && co == 0) {
                            tn1[i] = tracnghiem;
                            i++;
                            co = 1;
                        }
                        co = 0;
                    }
                    
                    // đến đoạn nay tl1 và tn1 đã loại bỏ các chương không được chọn
                   
                    TracNghiem[] tnde = new TracNghiem[50];
                    TuLuan[] tlde = new TuLuan[50];
                    TracNghiem[] tntb = new TracNghiem[50];
                    TuLuan[] tltb = new TuLuan[50];
                    TracNghiem[] tnkho = new TracNghiem[50];
                    TuLuan[] tlkho = new TuLuan[50];
                    int itnde=0,itntb=0,itnkho=0,itlde=0,itltb=0,itlkho=0;

                    for(TuLuan tlll:tl1) {
                        if(tlll==null) break;
                        if(tlll.xuatDoKho().equals("1")) {tlde[itlde] = tlll;itlde++;}
                        if(tlll.xuatDoKho().equals("2")) {tltb[itltb] = tlll;itltb++;}
                        if(tlll.xuatDoKho().equals("3")) {tlkho[itlkho] = tlll;itlkho++;}
                    }
                    for(TracNghiem tnnn:tn1) {
                        if(tnnn==null) break;
                        if(tnnn.xuatDoKho().equals("1")) {tnde[itnde] = tnnn;itnde++;}
                        if(tnnn.xuatDoKho().equals("2")) {tntb[itntb] = tnnn;itntb++;}
                        if(tnnn.xuatDoKho().equals("3")) {tnkho[itnkho] = tnnn;itnkho++;}
                    }
                    
                    // phân loại các câu dễ, trung bình, khó vào các mảng riêng

                    TracNghiem[] tncc = new TracNghiem[100];
                    TuLuan[] tlcc = new TuLuan[20];
                    int itncc=0,itlcc=0;
                    Random rd = new Random();
                    
                    ////////////////////////////////////////////////////////////
                    
                    if(hinhthuc == 0 || hinhthuc == 2) {
                        for(int kde=0;kde<300;kde++) {
                            if(itlcc==soCauDe1) break;
                            int k = rd.nextInt(itlde);
                            int flag=0;

                            for(TuLuan tllll:tlcc) {
                                if(tllll==null) break;
                                if(tllll.equals(tlde[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tlcc[itlcc] = tlde[k];
                                itlcc++;
                            }
                        }
                        for(int ktb=0;ktb<300;ktb++) {
                            if(itlcc==soCauDe1+soCauTB1) break;
                            int k = rd.nextInt(itltb);
                            int flag=0;

                            for(TuLuan tllll:tlcc) {
                                if(tllll==null) break;
                                if(tllll.equals(tltb[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tlcc[itlcc] = tltb[k];
                                itlcc++;
                            }
                        }
                        for(int kkho=0;kkho<300;kkho++) {
                            if(itlcc==soCauDe1+soCauTB1+soCauKho1) break;
                            int k = rd.nextInt(itlkho);
                            int flag=0;

                            for(TuLuan tllll:tlcc) {
                                if(tllll==null) break;
                                if(tllll.equals(tlkho[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tlcc[itlcc] = tlkho[k];
                                itlcc++;
                            }
                        }
                    }
                    // xong tlcc
                    if(hinhthuc == 1 || hinhthuc == 2) {
                        int soCauDe3=0;
                        int soCauTB3=0;
                        int soCauKho3=0;
                        if(hinhthuc == 1) {
                            soCauDe3 = soCauDe1;
                            soCauTB3 = soCauTB1;
                            soCauKho3 = soCauKho1;
                        }
                        if(hinhthuc == 2) {
                            soCauDe3 = soCauDe2;
                            soCauTB3 = soCauTB2;
                            soCauKho3 = soCauKho2;
                        }
                        for(int kde=0;kde<300;kde++) {
                            if(itncc==soCauDe3) break;
                            int k = rd.nextInt(itnde);
                            int flag=0;

                            for(TracNghiem tnnnn:tncc) {
                                if(tnnnn==null) break;
                                if(tnnnn.equals(tnde[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tncc[itncc] = tnde[k];
                                itncc++;
                            }
                        }
                        for(int ktb=0;ktb<300;ktb++) {
                            if(itncc==soCauDe3+soCauTB3) break;
                            int k = rd.nextInt(itntb);
                            int flag=0;

                            for(TracNghiem tnnnn:tncc) {
                                if(tnnnn==null) break;
                                if(tnnnn.equals(tntb[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tncc[itncc] = tntb[k];
                                itncc++;
                            }
                        }
                        for(int kkho=0;kkho<300;kkho++) {
                            if(itncc==soCauDe3+soCauTB3+soCauKho3) break;
                            int k = rd.nextInt(itnkho);
                            int flag=0;

                            for(TracNghiem tnnnn:tncc) {
                                if(tnnnn==null) break;
                                if(tnnnn.equals(tnkho[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tncc[itncc] = tnkho[k];
                                itncc++;
                            }
                        }
                    }
                    // xong tncc
                    
                    dethi = new DeThi(tncc, tlcc);
                    
                    String str="ĐỀ THI MÔN: "+mon+"\n\nPHẦN TRẮC NGHIỆM:\n";
                    for(TracNghiem tn: tncc) {
                        if(tn==null) break;
                        str = str + tn.xuatCauHoi() + "\n" + tn.xuatDapAn() + "\n\n";
                    }
                    str = str +"\n\n\nPHẦN TỰ LUẬN:\n";
                    for(TuLuan tl: tlcc) {
                        if(tl==null) break;
                        str = str + tl.xuatCauHoi()+"\n";
                    }
                    jTextArea1.setText(str);
                    
                    
                    
                    
                }
                break;
            case "ly": 
                if(chuong1==0 && chuong2==0 && chuong3==0 && chuong4==0) JOptionPane.showMessageDialog(null, "Chưa có chương nào của môn lý được chọn");
                else {
                    int i=0;
                    TracNghiem[] tn1 = new TracNghiem[500];
                    TuLuan[] tl1 = new TuLuan[500];
                    int co=0;
                    for(TuLuan tuluan:tl) {
                        if(tuluan == null) break;
                        if(chuong1 == 1 && GhiDocFile.kiemTraChuaStr(tuluan.xuatChuong(),"1") == 1) {
                            tl1[i] = tuluan;
                            i++;
                            co = 1;
                        }
                        if(chuong2 == 1 && GhiDocFile.kiemTraChuaStr(tuluan.xuatChuong(),"2") == 1 && co == 0) {
                            tl1[i] = tuluan;
                            i++;
                            co = 1;
                        }
                        if(chuong3 == 1 && GhiDocFile.kiemTraChuaStr(tuluan.xuatChuong(),"3") == 1 && co == 0) {
                            tl1[i] = tuluan;
                            i++;
                            co = 1;
                        }
                        co = 0;
                    }
                    i=0;
                    for(TracNghiem tracnghiem:tn) {
                        if(tracnghiem == null) break;
                        if(chuong1 == 1 && GhiDocFile.kiemTraChuaStr(tracnghiem.xuatChuong(),"1") == 1) {
                            tn1[i] = tracnghiem;
                            i++;
                            co = 1;
                        }
                        if(chuong2 == 1 && GhiDocFile.kiemTraChuaStr(tracnghiem.xuatChuong(),"2") == 1 && co == 0) {
                            tn1[i] = tracnghiem;
                            i++;
                            co = 1;
                        }
                        if(chuong3 == 1 && GhiDocFile.kiemTraChuaStr(tracnghiem.xuatChuong(),"3") == 1 && co == 0) {
                            tn1[i] = tracnghiem;
                            i++;
                            co = 1;
                        }
                        if(chuong4 == 1 && GhiDocFile.kiemTraChuaStr(tracnghiem.xuatChuong(),"4") == 1 && co == 0) {
                            tn1[i] = tracnghiem;
                            i++;
                            co = 1;
                        }
                        co = 0;
                    }
                    
                    // đến đoạn nay tl1 và tn1 đã loại bỏ các chương không được chọn
                   
                    TracNghiem[] tnde = new TracNghiem[50];
                    TuLuan[] tlde = new TuLuan[50];
                    TracNghiem[] tntb = new TracNghiem[50];
                    TuLuan[] tltb = new TuLuan[50];
                    TracNghiem[] tnkho = new TracNghiem[50];
                    TuLuan[] tlkho = new TuLuan[50];
                    int itnde=0,itntb=0,itnkho=0,itlde=0,itltb=0,itlkho=0;

                    for(TuLuan tlll:tl1) {
                        if(tlll==null) break;
                        if(tlll.xuatDoKho().equals("1")) {tlde[itlde] = tlll;itlde++;}
                        if(tlll.xuatDoKho().equals("2")) {tltb[itltb] = tlll;itltb++;}
                        if(tlll.xuatDoKho().equals("3")) {tlkho[itlkho] = tlll;itlkho++;}
                    }
                    for(TracNghiem tnnn:tn1) {
                        if(tnnn==null) break;
                        if(tnnn.xuatDoKho().equals("1")) {tnde[itnde] = tnnn;itnde++;}
                        if(tnnn.xuatDoKho().equals("2")) {tntb[itntb] = tnnn;itntb++;}
                        if(tnnn.xuatDoKho().equals("3")) {tnkho[itnkho] = tnnn;itnkho++;}
                    }
                    
                    // phân loại các câu dễ, trung bình, khó vào các mảng riêng

                    TracNghiem[] tncc = new TracNghiem[100];
                    TuLuan[] tlcc = new TuLuan[20];
                    int itncc=0,itlcc=0;
                    Random rd = new Random();
                    
                    ////////////////////////////////////////////////////////////
                    
                    if(hinhthuc == 0 || hinhthuc == 2) {
                        for(int kde=0;kde<300;kde++) {
                            if(itlcc==soCauDe1) break;
                            int k = rd.nextInt(itlde);
                            int flag=0;

                            for(TuLuan tllll:tlcc) {
                                if(tllll==null) break;
                                if(tllll.equals(tlde[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tlcc[itlcc] = tlde[k];
                                itlcc++;
                            }
                        }
                        for(int ktb=0;ktb<300;ktb++) {
                            if(itlcc==soCauDe1+soCauTB1) break;
                            int k = rd.nextInt(itltb);
                            int flag=0;

                            for(TuLuan tllll:tlcc) {
                                if(tllll==null) break;
                                if(tllll.equals(tltb[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tlcc[itlcc] = tltb[k];
                                itlcc++;
                            }
                        }
                        for(int kkho=0;kkho<300;kkho++) {
                            if(itlcc==soCauDe1+soCauTB1+soCauKho1) break;
                            int k = rd.nextInt(itlkho);
                            int flag=0;

                            for(TuLuan tllll:tlcc) {
                                if(tllll==null) break;
                                if(tllll.equals(tlkho[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tlcc[itlcc] = tlkho[k];
                                itlcc++;
                            }
                        }
                    }
                    // xong tlcc
                    if(hinhthuc == 1 || hinhthuc == 2) {
                        int soCauDe3=0;
                        int soCauTB3=0;
                        int soCauKho3=0;
                        if(hinhthuc == 1) {
                            soCauDe3 = soCauDe1;
                            soCauTB3 = soCauTB1;
                            soCauKho3 = soCauKho1;
                        }
                        if(hinhthuc == 2) {
                            soCauDe3 = soCauDe2;
                            soCauTB3 = soCauTB2;
                            soCauKho3 = soCauKho2;
                        }
                        for(int kde=0;kde<300;kde++) {
                            if(itncc==soCauDe3) break;
                            int k = rd.nextInt(itnde);
                            int flag=0;

                            for(TracNghiem tnnnn:tncc) {
                                if(tnnnn==null) break;
                                if(tnnnn.equals(tnde[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tncc[itncc] = tnde[k];
                                itncc++;
                            }
                        }
                        for(int ktb=0;ktb<300;ktb++) {
                            if(itncc==soCauDe3+soCauTB3) break;
                            int k = rd.nextInt(itntb);
                            int flag=0;

                            for(TracNghiem tnnnn:tncc) {
                                if(tnnnn==null) break;
                                if(tnnnn.equals(tntb[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tncc[itncc] = tntb[k];
                                itncc++;
                            }
                        }
                        for(int kkho=0;kkho<300;kkho++) {
                            if(itncc==soCauDe3+soCauTB3+soCauKho3) break;
                            int k = rd.nextInt(itnkho);
                            int flag=0;

                            for(TracNghiem tnnnn:tncc) {
                                if(tnnnn==null) break;
                                if(tnnnn.equals(tnkho[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tncc[itncc] = tnkho[k];
                                itncc++;
                            }
                        }
                    }
                    // xong tncc
                    
                    dethi = new DeThi(tncc, tlcc);
                    
                    String str="ĐỀ THI MÔN: "+mon+"\n\nPHẦN TRẮC NGHIỆM:\n";
                    for(TracNghiem tn: tncc) {
                        if(tn==null) break;
                        str = str + tn.xuatCauHoi() + "\n" + tn.xuatDapAn() + "\n\n";
                    }
                    str = str +"\n\n\nPHẦN TỰ LUẬN:\n";
                    for(TuLuan tl: tlcc) {
                        if(tl==null) break;
                        str = str + tl.xuatCauHoi()+"\n";
                    }
                    jTextArea1.setText(str);
                }
                break;
            case "hoa":
                if(chuong1==0 && chuong2==0) JOptionPane.showMessageDialog(null, "Chưa có chương nào của môn hóa được chọn");
                else {
                    int i=0;
                    TracNghiem[] tn1 = new TracNghiem[500];
                    TuLuan[] tl1 = new TuLuan[500];
                    int co=0;
                    for(TuLuan tuluan:tl) {
                        if(tuluan == null) break;
                        if(chuong1 == 1 && GhiDocFile.kiemTraChuaStr(tuluan.xuatChuong(),"1") == 1) {
                            tl1[i] = tuluan;
                            i++;
                            co = 1;
                        }
                        if(chuong2 == 1 && GhiDocFile.kiemTraChuaStr(tuluan.xuatChuong(),"2") == 1 && co == 0) {
                            tl1[i] = tuluan;
                            i++;
                            co = 1;
                        }
                        
                        co = 0;
                    }
                    i=0;
                    for(TracNghiem tracnghiem:tn) {
                        if(tracnghiem == null) break;
                        if(chuong1 == 1 && GhiDocFile.kiemTraChuaStr(tracnghiem.xuatChuong(),"1") == 1) {
                            tn1[i] = tracnghiem;
                            i++;
                            co = 1;
                        }
                        if(chuong2 == 1 && GhiDocFile.kiemTraChuaStr(tracnghiem.xuatChuong(),"2") == 1 && co == 0) {
                            tn1[i] = tracnghiem;
                            i++;
                            co = 1;
                        }
                        
                        co = 0;
                    }
                    
                    // đến đoạn nay tl1 và tn1 đã loại bỏ các chương không được chọn
                   
                    TracNghiem[] tnde = new TracNghiem[50];
                    TuLuan[] tlde = new TuLuan[50];
                    TracNghiem[] tntb = new TracNghiem[50];
                    TuLuan[] tltb = new TuLuan[50];
                    TracNghiem[] tnkho = new TracNghiem[50];
                    TuLuan[] tlkho = new TuLuan[50];
                    int itnde=0,itntb=0,itnkho=0,itlde=0,itltb=0,itlkho=0;

                    for(TuLuan tlll:tl1) {
                        if(tlll==null) break;
                        if(tlll.xuatDoKho().equals("1")) {tlde[itlde] = tlll;itlde++;}
                        if(tlll.xuatDoKho().equals("2")) {tltb[itltb] = tlll;itltb++;}
                        if(tlll.xuatDoKho().equals("3")) {tlkho[itlkho] = tlll;itlkho++;}
                    }
                    for(TracNghiem tnnn:tn1) {
                        if(tnnn==null) break;
                        if(tnnn.xuatDoKho().equals("1")) {tnde[itnde] = tnnn;itnde++;}
                        if(tnnn.xuatDoKho().equals("2")) {tntb[itntb] = tnnn;itntb++;}
                        if(tnnn.xuatDoKho().equals("3")) {tnkho[itnkho] = tnnn;itnkho++;}
                    }
                    
                    // phân loại các câu dễ, trung bình, khó vào các mảng riêng

                    TracNghiem[] tncc = new TracNghiem[100];
                    TuLuan[] tlcc = new TuLuan[20];
                    int itncc=0,itlcc=0;
                    Random rd = new Random();
                    
                    ////////////////////////////////////////////////////////////
                    
                    if(hinhthuc == 0 || hinhthuc == 2) {
                        for(int kde=0;kde<300;kde++) {
                            if(itlcc==soCauDe1) break;
                            int k = rd.nextInt(itlde);
                            int flag=0;

                            for(TuLuan tllll:tlcc) {
                                if(tllll==null) break;
                                if(tllll.equals(tlde[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tlcc[itlcc] = tlde[k];
                                itlcc++;
                            }
                        }
                        for(int ktb=0;ktb<300;ktb++) {
                            if(itlcc==soCauDe1+soCauTB1) break;
                            int k = rd.nextInt(itltb);
                            int flag=0;

                            for(TuLuan tllll:tlcc) {
                                if(tllll==null) break;
                                if(tllll.equals(tltb[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tlcc[itlcc] = tltb[k];
                                itlcc++;
                            }
                        }
                        for(int kkho=0;kkho<300;kkho++) {
                            if(itlcc==soCauDe1+soCauTB1+soCauKho1) break;
                            int k = rd.nextInt(itlkho);
                            int flag=0;

                            for(TuLuan tllll:tlcc) {
                                if(tllll==null) break;
                                if(tllll.equals(tlkho[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tlcc[itlcc] = tlkho[k];
                                itlcc++;
                            }
                        }
                    }
                    // xong tlcc
                    if(hinhthuc == 1 || hinhthuc == 2) {
                        int soCauDe3=0;
                        int soCauTB3=0;
                        int soCauKho3=0;
                        if(hinhthuc == 1) {
                            soCauDe3 = soCauDe1;
                            soCauTB3 = soCauTB1;
                            soCauKho3 = soCauKho1;
                        }
                        if(hinhthuc == 2) {
                            soCauDe3 = soCauDe2;
                            soCauTB3 = soCauTB2;
                            soCauKho3 = soCauKho2;
                        }
                        for(int kde=0;kde<300;kde++) {
                            if(itncc==soCauDe3) break;
                            int k = rd.nextInt(itnde);
                            int flag=0;

                            for(TracNghiem tnnnn:tncc) {
                                if(tnnnn==null) break;
                                if(tnnnn.equals(tnde[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tncc[itncc] = tnde[k];
                                itncc++;
                            }
                        }
                        for(int ktb=0;ktb<300;ktb++) {
                            if(itncc==soCauDe3+soCauTB3) break;
                            int k = rd.nextInt(itntb);
                            int flag=0;

                            for(TracNghiem tnnnn:tncc) {
                                if(tnnnn==null) break;
                                if(tnnnn.equals(tntb[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tncc[itncc] = tntb[k];
                                itncc++;
                            }
                        }
                        for(int kkho=0;kkho<300;kkho++) {
                            if(itncc==soCauDe3+soCauTB3+soCauKho3) break;
                            int k = rd.nextInt(itnkho);
                            int flag=0;

                            for(TracNghiem tnnnn:tncc) {
                                if(tnnnn==null) break;
                                if(tnnnn.equals(tnkho[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tncc[itncc] = tnkho[k];
                                itncc++;
                            }
                        }
                    }
                    // xong tncc
                    
                    dethi = new DeThi(tncc, tlcc);
                    
                    String str="ĐỀ THI MÔN: "+mon+"\n\nPHẦN TRẮC NGHIỆM:\n";
                    for(TracNghiem tn: tncc) {
                        if(tn==null) break;
                        str = str + tn.xuatCauHoi() + "\n" + tn.xuatDapAn() + "\n\n";
                    }
                    str = str +"\n\n\nPHẦN TỰ LUẬN:\n";
                    for(TuLuan tl: tlcc) {
                        if(tl==null) break;
                        str = str + tl.xuatCauHoi()+"\n";
                    }
                    jTextArea1.setText(str);
                }
                break;
            case "van":
                if(chuong1==0 && chuong2==0) JOptionPane.showMessageDialog(null, "Chưa có chương nào của môn văn được chọn");
                else {
                    int i=0;
                    TracNghiem[] tn1 = new TracNghiem[500];
                    TuLuan[] tl1 = new TuLuan[500];
                    int co=0;
                    for(TuLuan tuluan:tl) {
                        if(tuluan == null) break;
                        if(chuong1 == 1 && GhiDocFile.kiemTraChuaStr(tuluan.xuatChuong(),"1") == 1) {
                            tl1[i] = tuluan;
                            i++;
                            co = 1;
                        }
                        if(chuong2 == 1 && GhiDocFile.kiemTraChuaStr(tuluan.xuatChuong(),"2") == 1 && co == 0) {
                            tl1[i] = tuluan;
                            i++;
                            co = 1;
                        }
                        
                        co = 0;
                    }
                    i=0;
                    for(TracNghiem tracnghiem:tn) {
                        if(tracnghiem == null) break;
                        if(chuong1 == 1 && GhiDocFile.kiemTraChuaStr(tracnghiem.xuatChuong(),"1") == 1) {
                            tn1[i] = tracnghiem;
                            i++;
                            co = 1;
                        }
                        if(chuong2 == 1 && GhiDocFile.kiemTraChuaStr(tracnghiem.xuatChuong(),"2") == 1 && co == 0) {
                            tn1[i] = tracnghiem;
                            i++;
                            co = 1;
                        }
                        
                        co = 0;
                    }
                    
                    // đến đoạn nay tl1 và tn1 đã loại bỏ các chương không được chọn
                   
                    TracNghiem[] tnde = new TracNghiem[50];
                    TuLuan[] tlde = new TuLuan[50];
                    TracNghiem[] tntb = new TracNghiem[50];
                    TuLuan[] tltb = new TuLuan[50];
                    TracNghiem[] tnkho = new TracNghiem[50];
                    TuLuan[] tlkho = new TuLuan[50];
                    int itnde=0,itntb=0,itnkho=0,itlde=0,itltb=0,itlkho=0;

                    for(TuLuan tlll:tl1) {
                        if(tlll==null) break;
                        if(tlll.xuatDoKho().equals("1")) {tlde[itlde] = tlll;itlde++;}
                        if(tlll.xuatDoKho().equals("2")) {tltb[itltb] = tlll;itltb++;}
                        if(tlll.xuatDoKho().equals("3")) {tlkho[itlkho] = tlll;itlkho++;}
                    }
                    for(TracNghiem tnnn:tn1) {
                        if(tnnn==null) break;
                        if(tnnn.xuatDoKho().equals("1")) {tnde[itnde] = tnnn;itnde++;}
                        if(tnnn.xuatDoKho().equals("2")) {tntb[itntb] = tnnn;itntb++;}
                        if(tnnn.xuatDoKho().equals("3")) {tnkho[itnkho] = tnnn;itnkho++;}
                    }
                    
                    // phân loại các câu dễ, trung bình, khó vào các mảng riêng

                    TracNghiem[] tncc = new TracNghiem[100];
                    TuLuan[] tlcc = new TuLuan[20];
                    int itncc=0,itlcc=0;
                    Random rd = new Random();
                    
                    ////////////////////////////////////////////////////////////
                    
                    if(hinhthuc == 0 || hinhthuc == 2) {
                        for(int kde=0;kde<300;kde++) {
                            if(itlcc==soCauDe1) break;
                            int k = rd.nextInt(itlde);
                            int flag=0;

                            for(TuLuan tllll:tlcc) {
                                if(tllll==null) break;
                                if(tllll.equals(tlde[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tlcc[itlcc] = tlde[k];
                                itlcc++;
                            }
                        }
                        for(int ktb=0;ktb<300;ktb++) {
                            if(itlcc==soCauDe1+soCauTB1) break;
                            int k = rd.nextInt(itltb);
                            int flag=0;

                            for(TuLuan tllll:tlcc) {
                                if(tllll==null) break;
                                if(tllll.equals(tltb[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tlcc[itlcc] = tltb[k];
                                itlcc++;
                            }
                        }
                        for(int kkho=0;kkho<300;kkho++) {
                            if(itlcc==soCauDe1+soCauTB1+soCauKho1) break;
                            int k = rd.nextInt(itlkho);
                            int flag=0;

                            for(TuLuan tllll:tlcc) {
                                if(tllll==null) break;
                                if(tllll.equals(tlkho[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tlcc[itlcc] = tlkho[k];
                                itlcc++;
                            }
                        }
                    }
                    // xong tlcc
                    if(hinhthuc == 1 || hinhthuc == 2) {
                        int soCauDe3=0;
                        int soCauTB3=0;
                        int soCauKho3=0;
                        if(hinhthuc == 1) {
                            soCauDe3 = soCauDe1;
                            soCauTB3 = soCauTB1;
                            soCauKho3 = soCauKho1;
                        }
                        if(hinhthuc == 2) {
                            soCauDe3 = soCauDe2;
                            soCauTB3 = soCauTB2;
                            soCauKho3 = soCauKho2;
                        }
                        for(int kde=0;kde<300;kde++) {
                            if(itncc==soCauDe3) break;
                            int k = rd.nextInt(itnde);
                            int flag=0;

                            for(TracNghiem tnnnn:tncc) {
                                if(tnnnn==null) break;
                                if(tnnnn.equals(tnde[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tncc[itncc] = tnde[k];
                                itncc++;
                            }
                        }
                        for(int ktb=0;ktb<300;ktb++) {
                            if(itncc==soCauDe3+soCauTB3) break;
                            int k = rd.nextInt(itntb);
                            int flag=0;

                            for(TracNghiem tnnnn:tncc) {
                                if(tnnnn==null) break;
                                if(tnnnn.equals(tntb[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tncc[itncc] = tntb[k];
                                itncc++;
                            }
                        }
                        for(int kkho=0;kkho<300;kkho++) {
                            if(itncc==soCauDe3+soCauTB3+soCauKho3) break;
                            int k = rd.nextInt(itnkho);
                            int flag=0;

                            for(TracNghiem tnnnn:tncc) {
                                if(tnnnn==null) break;
                                if(tnnnn.equals(tnkho[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tncc[itncc] = tnkho[k];
                                itncc++;
                            }
                        }
                    }
                    // xong tncc
                    
                    dethi = new DeThi(tncc, tlcc);
                    
                    String str="ĐỀ THI MÔN: "+mon+"\n\nPHẦN TRẮC NGHIỆM:\n";
                    for(TracNghiem tn: tncc) {
                        if(tn==null) break;
                        str = str + tn.xuatCauHoi() + "\n" + tn.xuatDapAn() + "\n\n";
                    }
                    str = str +"\n\n\nPHẦN TỰ LUẬN:\n";
                    for(TuLuan tl: tlcc) {
                        if(tl==null) break;
                        str = str + tl.xuatCauHoi()+"\n";
                    }
                    jTextArea1.setText(str);
                }
                break;
            case "su":
                if(chuong1==0 && chuong2==0 && chuong3==0 && chuong4==0 && chuong5==0) JOptionPane.showMessageDialog(null, "Chưa có chương nào của môn sử được chọn");
                else {
                    int i=0;
                    TracNghiem[] tn1 = new TracNghiem[500];
                    TuLuan[] tl1 = new TuLuan[500];
                    int co=0;
                    for(TuLuan tuluan:tl) {
                        if(tuluan == null) break;
                        if(chuong1 == 1 && GhiDocFile.kiemTraChuaStr(tuluan.xuatChuong(),"1") == 1) {
                            tl1[i] = tuluan;
                            i++;
                            co = 1;
                        }
                        if(chuong2 == 1 && GhiDocFile.kiemTraChuaStr(tuluan.xuatChuong(),"2") == 1 && co == 0) {
                            tl1[i] = tuluan;
                            i++;
                            co = 1;
                        }
                        
                        co = 0;
                    }
                    i=0;
                    for(TracNghiem tracnghiem:tn) {
                        if(tracnghiem == null) break;
                        if(chuong1 == 1 && GhiDocFile.kiemTraChuaStr(tracnghiem.xuatChuong(),"1") == 1) {
                            tn1[i] = tracnghiem;
                            i++;
                            co = 1;
                        }
                        if(chuong2 == 1 && GhiDocFile.kiemTraChuaStr(tracnghiem.xuatChuong(),"2") == 1 && co == 0) {
                            tn1[i] = tracnghiem;
                            i++;
                            co = 1;
                        }
                        if(chuong3 == 1 && GhiDocFile.kiemTraChuaStr(tracnghiem.xuatChuong(),"3") == 1 && co == 0) {
                            tn1[i] = tracnghiem;
                            i++;
                            co = 1;
                        }
                        if(chuong4 == 1 && GhiDocFile.kiemTraChuaStr(tracnghiem.xuatChuong(),"4") == 1 && co == 0) {
                            tn1[i] = tracnghiem;
                            i++;
                            co = 1;
                        }
                        if(chuong5 == 1 && GhiDocFile.kiemTraChuaStr(tracnghiem.xuatChuong(),"5") == 1 && co == 0) {
                            tn1[i] = tracnghiem;
                            i++;
                            co = 1;
                        }
                        
                        co = 0;
                    }
                    
                    // đến đoạn nay tl1 và tn1 đã loại bỏ các chương không được chọn
                   
                    TracNghiem[] tnde = new TracNghiem[50];
                    TuLuan[] tlde = new TuLuan[50];
                    TracNghiem[] tntb = new TracNghiem[50];
                    TuLuan[] tltb = new TuLuan[50];
                    TracNghiem[] tnkho = new TracNghiem[50];
                    TuLuan[] tlkho = new TuLuan[50];
                    int itnde=0,itntb=0,itnkho=0,itlde=0,itltb=0,itlkho=0;

                    for(TuLuan tlll:tl1) {
                        if(tlll==null) break;
                        if(tlll.xuatDoKho().equals("1")) {tlde[itlde] = tlll;itlde++;}
                        if(tlll.xuatDoKho().equals("2")) {tltb[itltb] = tlll;itltb++;}
                        if(tlll.xuatDoKho().equals("3")) {tlkho[itlkho] = tlll;itlkho++;}
                    }
                    for(TracNghiem tnnn:tn1) {
                        if(tnnn==null) break;
                        if(tnnn.xuatDoKho().equals("1")) {tnde[itnde] = tnnn;itnde++;}
                        if(tnnn.xuatDoKho().equals("2")) {tntb[itntb] = tnnn;itntb++;}
                        if(tnnn.xuatDoKho().equals("3")) {tnkho[itnkho] = tnnn;itnkho++;}
                    }
                    
                    // phân loại các câu dễ, trung bình, khó vào các mảng riêng

                    TracNghiem[] tncc = new TracNghiem[100];
                    TuLuan[] tlcc = new TuLuan[20];
                    int itncc=0,itlcc=0;
                    Random rd = new Random();
                    
                    ////////////////////////////////////////////////////////////
                    
                    if(hinhthuc == 0 || hinhthuc == 2) {
                        for(int kde=0;kde<300;kde++) {
                            if(itlcc==soCauDe1) break;
                            int k = rd.nextInt(itlde);
                            int flag=0;

                            for(TuLuan tllll:tlcc) {
                                if(tllll==null) break;
                                if(tllll.equals(tlde[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tlcc[itlcc] = tlde[k];
                                itlcc++;
                            }
                        }
                        for(int ktb=0;ktb<300;ktb++) {
                            if(itlcc==soCauDe1+soCauTB1) break;
                            int k = rd.nextInt(itltb);
                            int flag=0;

                            for(TuLuan tllll:tlcc) {
                                if(tllll==null) break;
                                if(tllll.equals(tltb[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tlcc[itlcc] = tltb[k];
                                itlcc++;
                            }
                        }
                        for(int kkho=0;kkho<300;kkho++) {
                            if(itlcc==soCauDe1+soCauTB1+soCauKho1) break;
                            int k = rd.nextInt(itlkho);
                            int flag=0;

                            for(TuLuan tllll:tlcc) {
                                if(tllll==null) break;
                                if(tllll.equals(tlkho[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tlcc[itlcc] = tlkho[k];
                                itlcc++;
                            }
                        }
                    }
                    // xong tlcc
                    if(hinhthuc == 1 || hinhthuc == 2) {
                        int soCauDe3=0;
                        int soCauTB3=0;
                        int soCauKho3=0;
                        if(hinhthuc == 1) {
                            soCauDe3 = soCauDe1;
                            soCauTB3 = soCauTB1;
                            soCauKho3 = soCauKho1;
                        }
                        if(hinhthuc == 2) {
                            soCauDe3 = soCauDe2;
                            soCauTB3 = soCauTB2;
                            soCauKho3 = soCauKho2;
                        }
                        for(int kde=0;kde<300;kde++) {
                            if(itncc==soCauDe3) break;
                            int k = rd.nextInt(itnde);
                            int flag=0;

                            for(TracNghiem tnnnn:tncc) {
                                if(tnnnn==null) break;
                                if(tnnnn.equals(tnde[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tncc[itncc] = tnde[k];
                                itncc++;
                            }
                        }
                        for(int ktb=0;ktb<300;ktb++) {
                            if(itncc==soCauDe3+soCauTB3) break;
                            int k = rd.nextInt(itntb);
                            int flag=0;

                            for(TracNghiem tnnnn:tncc) {
                                if(tnnnn==null) break;
                                if(tnnnn.equals(tntb[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tncc[itncc] = tntb[k];
                                itncc++;
                            }
                        }
                        for(int kkho=0;kkho<300;kkho++) {
                            if(itncc==soCauDe3+soCauTB3+soCauKho3) break;
                            int k = rd.nextInt(itnkho);
                            int flag=0;

                            for(TracNghiem tnnnn:tncc) {
                                if(tnnnn==null) break;
                                if(tnnnn.equals(tnkho[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tncc[itncc] = tnkho[k];
                                itncc++;
                            }
                        }
                    }
                    // xong tncc
                    
                    dethi = new DeThi(tncc, tlcc);
                    
                    String str="ĐỀ THI MÔN: "+mon+"\n\nPHẦN TRẮC NGHIỆM:\n";
                    for(TracNghiem tn: tncc) {
                        if(tn==null) break;
                        str = str + tn.xuatCauHoi() + "\n" + tn.xuatDapAn() + "\n\n";
                    }
                    str = str +"\n\n\nPHẦN TỰ LUẬN:\n";
                    for(TuLuan tl: tlcc) {
                        if(tl==null) break;
                        str = str + tl.xuatCauHoi()+"\n";
                    }
                    jTextArea1.setText(str);
                }
                break;
            case "dia":
                if(chuong1==0 && chuong2==0 && chuong3==0) JOptionPane.showMessageDialog(null, "Chưa có chương nào của môn địa được chọn");
                else {
                    int i=0;
                    TracNghiem[] tn1 = new TracNghiem[500];
                    TuLuan[] tl1 = new TuLuan[500];
                    int co=0;
                    for(TuLuan tuluan:tl) {
                        if(tuluan == null) break;
                        if(chuong1 == 1 && GhiDocFile.kiemTraChuaStr(tuluan.xuatChuong(),"1") == 1) {
                            tl1[i] = tuluan;
                            i++;
                            co = 1;
                        }
                        if(chuong2 == 1 && GhiDocFile.kiemTraChuaStr(tuluan.xuatChuong(),"2") == 1 && co == 0) {
                            tl1[i] = tuluan;
                            i++;
                            co = 1;
                        }
                        if(chuong3 == 1 && GhiDocFile.kiemTraChuaStr(tuluan.xuatChuong(),"3") == 1 && co == 0) {
                            tl1[i] = tuluan;
                            i++;
                            co = 1;
                        }
                        co = 0;
                    }
                    i=0;
                    for(TracNghiem tracnghiem:tn) {
                        if(tracnghiem == null) break;
                        if(chuong1 == 1 && GhiDocFile.kiemTraChuaStr(tracnghiem.xuatChuong(),"1") == 1) {
                            tn1[i] = tracnghiem;
                            i++;
                            co = 1;
                        }
                        if(chuong2 == 1 && GhiDocFile.kiemTraChuaStr(tracnghiem.xuatChuong(),"2") == 1 && co == 0) {
                            tn1[i] = tracnghiem;
                            i++;
                            co = 1;
                        }
                        if(chuong3 == 1 && GhiDocFile.kiemTraChuaStr(tracnghiem.xuatChuong(),"3") == 1 && co == 0) {
                            tn1[i] = tracnghiem;
                            i++;
                            co = 1;
                        }
                        co = 0;
                    }
                    
                    // đến đoạn nay tl1 và tn1 đã loại bỏ các chương không được chọn
                   
                    TracNghiem[] tnde = new TracNghiem[50];
                    TuLuan[] tlde = new TuLuan[50];
                    TracNghiem[] tntb = new TracNghiem[50];
                    TuLuan[] tltb = new TuLuan[50];
                    TracNghiem[] tnkho = new TracNghiem[50];
                    TuLuan[] tlkho = new TuLuan[50];
                    int itnde=0,itntb=0,itnkho=0,itlde=0,itltb=0,itlkho=0;

                    for(TuLuan tlll:tl1) {
                        if(tlll==null) break;
                        if(tlll.xuatDoKho().equals("1")) {tlde[itlde] = tlll;itlde++;}
                        if(tlll.xuatDoKho().equals("2")) {tltb[itltb] = tlll;itltb++;}
                        if(tlll.xuatDoKho().equals("3")) {tlkho[itlkho] = tlll;itlkho++;}
                    }
                    for(TracNghiem tnnn:tn1) {
                        if(tnnn==null) break;
                        if(tnnn.xuatDoKho().equals("1")) {tnde[itnde] = tnnn;itnde++;}
                        if(tnnn.xuatDoKho().equals("2")) {tntb[itntb] = tnnn;itntb++;}
                        if(tnnn.xuatDoKho().equals("3")) {tnkho[itnkho] = tnnn;itnkho++;}
                    }
                    
                    // phân loại các câu dễ, trung bình, khó vào các mảng riêng

                    TracNghiem[] tncc = new TracNghiem[100];
                    TuLuan[] tlcc = new TuLuan[20];
                    int itncc=0,itlcc=0;
                    Random rd = new Random();
                    
                    ////////////////////////////////////////////////////////////
                    
                    if(hinhthuc == 0 || hinhthuc == 2) {
                        for(int kde=0;kde<300;kde++) {
                            if(itlcc==soCauDe1) break;
                            int k = rd.nextInt(itlde);
                            int flag=0;

                            for(TuLuan tllll:tlcc) {
                                if(tllll==null) break;
                                if(tllll.equals(tlde[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tlcc[itlcc] = tlde[k];
                                itlcc++;
                            }
                        }
                        for(int ktb=0;ktb<300;ktb++) {
                            if(itlcc==soCauDe1+soCauTB1) break;
                            int k = rd.nextInt(itltb);
                            int flag=0;

                            for(TuLuan tllll:tlcc) {
                                if(tllll==null) break;
                                if(tllll.equals(tltb[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tlcc[itlcc] = tltb[k];
                                itlcc++;
                            }
                        }
                        for(int kkho=0;kkho<300;kkho++) {
                            if(itlcc==soCauDe1+soCauTB1+soCauKho1) break;
                            int k = rd.nextInt(itlkho);
                            int flag=0;

                            for(TuLuan tllll:tlcc) {
                                if(tllll==null) break;
                                if(tllll.equals(tlkho[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tlcc[itlcc] = tlkho[k];
                                itlcc++;
                            }
                        }
                    }
                    // xong tlcc
                    if(hinhthuc == 1 || hinhthuc == 2) {
                        int soCauDe3=0;
                        int soCauTB3=0;
                        int soCauKho3=0;
                        if(hinhthuc == 1) {
                            soCauDe3 = soCauDe1;
                            soCauTB3 = soCauTB1;
                            soCauKho3 = soCauKho1;
                        }
                        if(hinhthuc == 2) {
                            soCauDe3 = soCauDe2;
                            soCauTB3 = soCauTB2;
                            soCauKho3 = soCauKho2;
                        }
                        for(int kde=0;kde<300;kde++) {
                            if(itncc==soCauDe3) break;
                            int k = rd.nextInt(itnde);
                            int flag=0;

                            for(TracNghiem tnnnn:tncc) {
                                if(tnnnn==null) break;
                                if(tnnnn.equals(tnde[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tncc[itncc] = tnde[k];
                                itncc++;
                            }
                        }
                        for(int ktb=0;ktb<300;ktb++) {
                            if(itncc==soCauDe3+soCauTB3) break;
                            int k = rd.nextInt(itntb);
                            int flag=0;

                            for(TracNghiem tnnnn:tncc) {
                                if(tnnnn==null) break;
                                if(tnnnn.equals(tntb[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tncc[itncc] = tntb[k];
                                itncc++;
                            }
                        }
                        for(int kkho=0;kkho<300;kkho++) {
                            if(itncc==soCauDe3+soCauTB3+soCauKho3) break;
                            int k = rd.nextInt(itnkho);
                            int flag=0;

                            for(TracNghiem tnnnn:tncc) {
                                if(tnnnn==null) break;
                                if(tnnnn.equals(tnkho[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tncc[itncc] = tnkho[k];
                                itncc++;
                            }
                        }
                    }
                    // xong tncc
                    
                    dethi = new DeThi(tncc, tlcc);
                    
                    String str="ĐỀ THI MÔN: "+mon+"\n\nPHẦN TRẮC NGHIỆM:\n";
                    for(TracNghiem tn: tncc) {
                        if(tn==null) break;
                        str = str + tn.xuatCauHoi() + "\n" + tn.xuatDapAn() + "\n\n";
                    }
                    str = str +"\n\n\nPHẦN TỰ LUẬN:\n";
                    for(TuLuan tl: tlcc) {
                        if(tl==null) break;
                        str = str + tl.xuatCauHoi()+"\n";
                    }
                    jTextArea1.setText(str);
                }
                break;
            case "ngoai":
                if(chuong1==0 && chuong2==0) JOptionPane.showMessageDialog(null, "Chưa có chương nào của môn ngoại được chọn");
                else {
                    int i=0;
                    TracNghiem[] tn1 = new TracNghiem[500];
                    TuLuan[] tl1 = new TuLuan[500];
                    int co=0;
                    for(TuLuan tuluan:tl) {
                        if(tuluan == null) break;
                        if(chuong1 == 1 && GhiDocFile.kiemTraChuaStr(tuluan.xuatChuong(),"1") == 1) {
                            tl1[i] = tuluan;
                            i++;
                            co = 1;
                        }
                        if(chuong2 == 1 && GhiDocFile.kiemTraChuaStr(tuluan.xuatChuong(),"2") == 1 && co == 0) {
                            tl1[i] = tuluan;
                            i++;
                            co = 1;
                        }
                        
                        co = 0;
                    }
                    i=0;
                    for(TracNghiem tracnghiem:tn) {
                        if(tracnghiem == null) break;
                        if(chuong1 == 1 && GhiDocFile.kiemTraChuaStr(tracnghiem.xuatChuong(),"1") == 1) {
                            tn1[i] = tracnghiem;
                            i++;
                            co = 1;
                        }
                        if(chuong2 == 1 && GhiDocFile.kiemTraChuaStr(tracnghiem.xuatChuong(),"2") == 1 && co == 0) {
                            tn1[i] = tracnghiem;
                            i++;
                            co = 1;
                        }
                        
                        co = 0;
                    }
                    
                    // đến đoạn nay tl1 và tn1 đã loại bỏ các chương không được chọn
                   
                    TracNghiem[] tnde = new TracNghiem[50];
                    TuLuan[] tlde = new TuLuan[50];
                    TracNghiem[] tntb = new TracNghiem[50];
                    TuLuan[] tltb = new TuLuan[50];
                    TracNghiem[] tnkho = new TracNghiem[50];
                    TuLuan[] tlkho = new TuLuan[50];
                    int itnde=0,itntb=0,itnkho=0,itlde=0,itltb=0,itlkho=0;

                    for(TuLuan tlll:tl1) {
                        if(tlll==null) break;
                        if(tlll.xuatDoKho().equals("1")) {tlde[itlde] = tlll;itlde++;}
                        if(tlll.xuatDoKho().equals("2")) {tltb[itltb] = tlll;itltb++;}
                        if(tlll.xuatDoKho().equals("3")) {tlkho[itlkho] = tlll;itlkho++;}
                    }
                    for(TracNghiem tnnn:tn1) {
                        if(tnnn==null) break;
                        if(tnnn.xuatDoKho().equals("1")) {tnde[itnde] = tnnn;itnde++;}
                        if(tnnn.xuatDoKho().equals("2")) {tntb[itntb] = tnnn;itntb++;}
                        if(tnnn.xuatDoKho().equals("3")) {tnkho[itnkho] = tnnn;itnkho++;}
                    }
                    
                    // phân loại các câu dễ, trung bình, khó vào các mảng riêng

                    TracNghiem[] tncc = new TracNghiem[100];
                    TuLuan[] tlcc = new TuLuan[20];
                    int itncc=0,itlcc=0;
                    Random rd = new Random();
                    
                    ////////////////////////////////////////////////////////////
                    
                    if(hinhthuc == 0 || hinhthuc == 2) {
                        for(int kde=0;kde<300;kde++) {
                            if(itlcc==soCauDe1) break;
                            int k = rd.nextInt(itlde);
                            int flag=0;

                            for(TuLuan tllll:tlcc) {
                                if(tllll==null) break;
                                if(tllll.equals(tlde[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tlcc[itlcc] = tlde[k];
                                itlcc++;
                            }
                        }
                        for(int ktb=0;ktb<300;ktb++) {
                            if(itlcc==soCauDe1+soCauTB1) break;
                            int k = rd.nextInt(itltb);
                            int flag=0;

                            for(TuLuan tllll:tlcc) {
                                if(tllll==null) break;
                                if(tllll.equals(tltb[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tlcc[itlcc] = tltb[k];
                                itlcc++;
                            }
                        }
                        for(int kkho=0;kkho<300;kkho++) {
                            if(itlcc==soCauDe1+soCauTB1+soCauKho1) break;
                            int k = rd.nextInt(itlkho);
                            int flag=0;

                            for(TuLuan tllll:tlcc) {
                                if(tllll==null) break;
                                if(tllll.equals(tlkho[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tlcc[itlcc] = tlkho[k];
                                itlcc++;
                            }
                        }
                    }
                    // xong tlcc
                    if(hinhthuc == 1 || hinhthuc == 2) {
                        int soCauDe3=0;
                        int soCauTB3=0;
                        int soCauKho3=0;
                        if(hinhthuc == 1) {
                            soCauDe3 = soCauDe1;
                            soCauTB3 = soCauTB1;
                            soCauKho3 = soCauKho1;
                        }
                        if(hinhthuc == 2) {
                            soCauDe3 = soCauDe2;
                            soCauTB3 = soCauTB2;
                            soCauKho3 = soCauKho2;
                        }
                        for(int kde=0;kde<300;kde++) {
                            if(itncc==soCauDe3) break;
                            int k = rd.nextInt(itnde);
                            int flag=0;

                            for(TracNghiem tnnnn:tncc) {
                                if(tnnnn==null) break;
                                if(tnnnn.equals(tnde[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tncc[itncc] = tnde[k];
                                itncc++;
                            }
                        }
                        for(int ktb=0;ktb<300;ktb++) {
                            if(itncc==soCauDe3+soCauTB3) break;
                            int k = rd.nextInt(itntb);
                            int flag=0;

                            for(TracNghiem tnnnn:tncc) {
                                if(tnnnn==null) break;
                                if(tnnnn.equals(tntb[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tncc[itncc] = tntb[k];
                                itncc++;
                            }
                        }
                        for(int kkho=0;kkho<300;kkho++) {
                            if(itncc==soCauDe3+soCauTB3+soCauKho3) break;
                            int k = rd.nextInt(itnkho);
                            int flag=0;

                            for(TracNghiem tnnnn:tncc) {
                                if(tnnnn==null) break;
                                if(tnnnn.equals(tnkho[k])) {flag=1;break;}
                            }

                            if(flag==0) {
                                tncc[itncc] = tnkho[k];
                                itncc++;
                            }
                        }
                    }
                    // xong tncc
                    
                    dethi = new DeThi(tncc, tlcc);
                    
                    String str="ĐỀ THI MÔN: "+mon+"\n\nPHẦN TRẮC NGHIỆM:\n";
                    for(TracNghiem tn: tncc) {
                        if(tn==null) break;
                        str = str + tn.xuatCauHoi() + "\n" + tn.xuatDapAn() + "\n\n";
                    }
                    str = str +"\n\n\nPHẦN TỰ LUẬN:\n";
                    for(TuLuan tl: tlcc) {
                        if(tl==null) break;
                        str = str + tl.xuatCauHoi()+"\n";
                    }
                    jTextArea1.setText(str);
                }
                break;
        }
        
        
        /*int k1=0,k2=0;
        for(TuLuan tl11:tl1) {
            if(tl11==null) break;
            k1++;
        }
        for(TracNghiem tn11:tn1) {
            if(tn11==null) break;
            k2++;
        }*/
        // k1 và k2 lần lượt là số câu hỏi tl và tn
        
        
        
        
        
        
        
        
        //for()
        //rd.nextInt(10);
        
        
        
        
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int i=0;
        while(dethi.xuatTN()[i]!=null) {
            dethi.xuatTN()[i].daoDapAn();
            i++;
        }
        String str="ĐỀ THI MÔN: "+mon+"\n\nPHẦN TRẮC NGHIỆM:\n";
        for(TracNghiem tn: dethi.xuatTN()) {
            if(tn==null) break;
            str = str + tn.xuatCauHoi() + "\n" + tn.xuatDapAn() + "\n\n";
        }
        str = str +"\n\n\nPHẦN TỰ LUẬN:\n";
        for(TuLuan tl: dethi.xuatTL()) {
            if(tl==null) break;
            str = str + tl.xuatCauHoi()+"\n";
        }
        jTextArea1.setText(str);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        new TenFileXuatDeThi(dethi).setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SinhNgauNhien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SinhNgauNhien("su",2,2,3,0,4,2,1).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton11;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
